{"version":3,"sources":["components/Dialogs/Dialogs.module.css","../node_modules/classnames/index.js","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","default","Message","props","className","cn","s","message","text","Dialog","dialog","src","photo","to","id","activeClassName","item_active","name","NewMsgForm","Form","onSubmit","handleSubmit","createField","Textarea","required","placeholder","btn","reduxForm","form","Dialogs","dialogs","items","data","map","messages","msg","values","onAddMsg","newMsg","resetForm","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","compose","withFormReset","getDialogsData"],"mappings":";2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,uBAAuB,OAAS,wBAAwB,YAAc,6BAA6B,SAAW,0BAA0B,QAAU,yBAAyB,IAAM,uB,oBCD9O,OAOC,WACA,aAEA,IAAIC,EAAS,GAAGC,eAEhB,SAASC,IAGR,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAC1C,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CAEA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC3BL,EAAQM,KAAKF,QACP,GAAIG,MAAMC,QAAQJ,IAAQA,EAAID,OAAQ,CAC5C,IAAIM,EAAQV,EAAWW,MAAM,KAAMN,GAC/BK,GACHT,EAAQM,KAAKG,QAER,GAAgB,WAAZJ,EACV,IAAK,IAAIM,KAAOP,EACXP,EAAOe,KAAKR,EAAKO,IAAQP,EAAIO,IAChCX,EAAQM,KAAKK,IAMjB,OAAOX,EAAQa,KAAK,KAGgBlB,EAAOC,SAC3CG,EAAWe,QAAUf,EACrBJ,EAAOC,QAAUG,QAGX,kBACL,OAAOA,GADF,QAAe,OAAf,aAtCP,I,yGCKcgB,EARC,SAACC,GACb,OACI,yBAAKC,UAAWC,IAAGC,IAAEC,UAChBJ,EAAMK,O,QCiBJC,EAnBA,SAACN,GACZ,OACI,2BAAOC,UAAWC,IAAGC,IAAEI,SACnB,+BACA,4BACI,4BACI,yBAAKN,UAAU,aAAaO,IAAKR,EAAMS,SAE3C,4BACI,kBAAC,IAAD,CAASC,GAAI,YAAcV,EAAMW,GAAIC,gBAAiBT,IAAEU,aACnDb,EAAMc,W,kCCL3BC,EAAa,SAACf,GACd,OACI,kBAACgB,EAAA,EAAD,CAAMC,SAAUjB,EAAMkB,cACjBC,YAAY,SAAUC,IAAU,CAACC,KAAW,CAACC,YAAa,sBAC3D,4BAAQrB,UAAWE,IAAEoB,KAArB,WAIZR,EAAaS,YAAU,CAACC,KATD,UASVD,CAAkCT,GAE/C,IAeeW,EAfC,SAAC1B,GACb,OACI,yBAAKC,UAAWC,IAAGC,IAAEwB,UACjB,yBAAK1B,UAAWC,IAAG,yBAAKC,IAAEwB,QAAR,YAAmBxB,IAAEyB,QAAU,KAC5C5B,EAAM6B,KAAKF,QAAQG,KAAI,SAAAvB,GAAM,OAAI,kBAAC,EAAD,CAAQZ,IAAKY,EAAOI,GAAIA,GAAIJ,EAAOI,GAAIG,KAAMP,EAAOO,KAC5CL,MAAOF,EAAOE,YAE5D,yBAAKR,UAAWC,IAAG,yBAAKC,IAAEwB,QAAR,YAAmBxB,IAAE4B,WAAa,KAC/C/B,EAAM6B,KAAKE,SAASD,KAAI,SAAAE,GAAG,OAAI,kBAAC,EAAD,CAASrC,IAAKqC,EAAIrB,GAAIN,KAAM2B,EAAI3B,WAEpE,kBAAC,EAAD,CAAYY,SAAU,SAACgB,GAAajC,EAAMkC,SAASD,EAAOE,QAASnC,EAAMoC,UArB9D,e,gBCLnBC,EAAkB,SAACC,GAAD,MAAY,CAACC,OAAQD,EAAME,KAAKD,SAYvCE,EAVU,SAACC,GAOtB,OAAOC,YAAQN,EAARM,EANiB,SAAC3C,GACrB,OAAOA,EAAMuC,OACP,kBAACG,EAAc1C,GACf,kBAAC,IAAD,CAAUU,GAAG,e,iCCCZkC,sBACXH,EACAI,IACAF,aALoB,SAACL,GAAD,MAAY,CAAET,KAAMiB,YAAeR,MAK9B,CAAEJ,eAHhBU,CAIblB","file":"static/js/3.3dc79b2d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3hRqD\",\"items\":\"Dialogs_items__2dYAv\",\"dialog\":\"Dialogs_dialog__37TSh\",\"item_active\":\"Dialogs_item_active__ZnLZA\",\"messages\":\"Dialogs_messages__D5Nso\",\"message\":\"Dialogs_message__1v-6H\",\"btn\":\"Dialogs_btn__2bLOE\"};","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={cn(s.message)}>\r\n            {props.text}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Message;","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport cn from \"classnames\";\r\n\r\nconst Dialog = (props) => {\r\n    return (\r\n        <table className={cn(s.dialog)}>\r\n            <thead>\r\n            <tr>\r\n                <td>\r\n                    <img className=\"common_ava\" src={props.photo}/>\r\n                </td>\r\n                <td>\r\n                    <NavLink to={'/dialogs/' + props.id} activeClassName={s.item_active}>\r\n                        {props.name}\r\n                    </NavLink>\r\n                </td>\r\n            </tr>\r\n            </thead>\r\n        </table>\r\n    )\r\n};\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport { Form, reduxForm} from \"redux-form\";\r\nimport {required} from \"../common/validator/validator\";\r\nimport {createField, Textarea} from \"../common/formcomponents/Components\";\r\nimport cn from 'classnames'; // npmjs.com/package/classnames\r\n\r\nconst NewMsgFormName = \"newMsg\";\r\nlet NewMsgForm = (props) => {\r\n    return (\r\n        <Form onSubmit={props.handleSubmit}>\r\n            {createField(\"newMsg\", Textarea, [required], {placeholder: \"Enter new message\"})}\r\n            <button className={s.btn}> Send</button>\r\n        </Form>)\r\n};\r\n\r\nNewMsgForm = reduxForm({form: NewMsgFormName})(NewMsgForm);\r\n\r\nconst Dialogs = (props) => {\r\n    return (\r\n        <div className={cn(s.dialogs)}>\r\n            <div className={cn({[`${s.dialogs}-${s.items}`]: true})}>\r\n                {props.data.dialogs.map(dialog => <Dialog key={dialog.id} id={dialog.id} name={dialog.name}\r\n                                                          photo={dialog.photo}/>)}\r\n            </div>\r\n            <div className={cn({[`${s.dialogs}-${s.messages}`]: true})}>\r\n                {props.data.messages.map(msg => <Message key={msg.id} text={msg.text}/>)}\r\n            </div>\r\n            <NewMsgForm onSubmit={(values) => { props.onAddMsg(values.newMsg); props.resetForm(NewMsgFormName)}}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => ({isAuth: state.auth.isAuth});\r\n\r\nconst withAuthRedirect = (Component) => {\r\n    const RedirectWrapper = (props) => {\r\n        return props.isAuth\r\n            ? <Component {...props}/>\r\n            : <Redirect to='/login'/>\r\n    };\r\n\r\n    return connect(mapStateToProps)(RedirectWrapper);\r\n};\r\n\r\nexport default withAuthRedirect;","import React from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {getDialogsData} from \"../../selectors/stateSelector\";\r\nimport {onAddMsg} from \"../../redux/reducer/dialogReducer\";\r\nimport withFormReset from \"../../hoc/withFormReset\";\r\n\r\nconst mapStateToProps = (state) => ({ data: getDialogsData(state) });\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    withFormReset,\r\n    connect(mapStateToProps, { onAddMsg })\r\n)(Dialogs);\r\n"],"sourceRoot":""}